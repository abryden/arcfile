// automatically generated by the FlatBuffers compiler, do not modify
// swiftlint:disable all
// swiftformat:disable all

import FlatBuffers

public enum arcfile_Encoding: Int8, Enum { 
  public typealias T = Int8
  public static var byteSize: Int { return MemoryLayout<Int8>.size }
  public var value: Int8 { return self.rawValue }
  case h264 = 0
  case hevc = 1
  case jpg = 2
  case png = 3
  case rawYuv = 4
  case rawRgb = 5
  case rawYcbcr = 6
  

  public static var max: arcfile_Encoding { return .rawYcbcr }
  public static var min: arcfile_Encoding { return .h264 }
}

public struct arcfile_Header: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_1_12_0() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static func getRootAsHeader(bb: ByteBuffer) -> arcfile_Header { return arcfile_Header(Table(bb: bb, position: Int32(bb.read(def: UOffset.self, position: bb.reader)) + Int32(bb.reader))) }

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case entrySize = 4
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var entrySize: UInt32 { let o = _accessor.offset(VTOFFSET.entrySize.v); return o == 0 ? 0 : _accessor.readBuffer(of: UInt32.self, at: o) }
  public static func startHeader(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 1) }
  public static func add(entrySize: UInt32, _ fbb: inout FlatBufferBuilder) { fbb.add(element: entrySize, def: 0, at: VTOFFSET.entrySize.p) }
  public static func endHeader(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset> { let end = Offset<UOffset>(offset: fbb.endTable(at: start)); return end }
  public static func createHeader(
    _ fbb: inout FlatBufferBuilder,
    entrySize: UInt32 = 0
  ) -> Offset<UOffset> {
    let __start = arcfile_Header.startHeader(&fbb)
    arcfile_Header.add(entrySize: entrySize, &fbb)
    return arcfile_Header.endHeader(&fbb, start: __start)
  }
}

public struct arcfile_Image: FlatBufferObject {

  static func validateVersion() { FlatBuffersVersion_1_12_0() }
  public var __buffer: ByteBuffer! { return _accessor.bb }
  private var _accessor: Table

  public static func getRootAsImage(bb: ByteBuffer) -> arcfile_Image { return arcfile_Image(Table(bb: bb, position: Int32(bb.read(def: UOffset.self, position: bb.reader)) + Int32(bb.reader))) }

  private init(_ t: Table) { _accessor = t }
  public init(_ bb: ByteBuffer, o: Int32) { _accessor = Table(bb: bb, position: o) }

  private enum VTOFFSET: VOffset {
    case imageEncoding = 4
    case imageTimestamp = 6
    case imageData = 8
    var v: Int32 { Int32(self.rawValue) }
    var p: VOffset { self.rawValue }
  }

  public var imageEncoding: arcfile_Encoding { let o = _accessor.offset(VTOFFSET.imageEncoding.v); return o == 0 ? .h264 : arcfile_Encoding(rawValue: _accessor.readBuffer(of: Int8.self, at: o)) ?? .h264 }
  public var imageTimestamp: Double { let o = _accessor.offset(VTOFFSET.imageTimestamp.v); return o == 0 ? 0.0 : _accessor.readBuffer(of: Double.self, at: o) }
  public var imageDataCount: Int32 { let o = _accessor.offset(VTOFFSET.imageData.v); return o == 0 ? 0 : _accessor.vector(count: o) }
  public func imageData(at index: Int32) -> Int8 { let o = _accessor.offset(VTOFFSET.imageData.v); return o == 0 ? 0 : _accessor.directRead(of: Int8.self, offset: _accessor.vector(at: o) + index * 1) }
  public var imageData: [Int8] { return _accessor.getVector(at: VTOFFSET.imageData.v) ?? [] }
  public static func startImage(_ fbb: inout FlatBufferBuilder) -> UOffset { fbb.startTable(with: 3) }
  public static func add(imageEncoding: arcfile_Encoding, _ fbb: inout FlatBufferBuilder) { fbb.add(element: imageEncoding.rawValue, def: 0, at: VTOFFSET.imageEncoding.p) }
  public static func add(imageTimestamp: Double, _ fbb: inout FlatBufferBuilder) { fbb.add(element: imageTimestamp, def: 0.0, at: VTOFFSET.imageTimestamp.p) }
  public static func addVectorOf(imageData: Offset<UOffset>, _ fbb: inout FlatBufferBuilder) { fbb.add(offset: imageData, at: VTOFFSET.imageData.p) }
  public static func endImage(_ fbb: inout FlatBufferBuilder, start: UOffset) -> Offset<UOffset> { let end = Offset<UOffset>(offset: fbb.endTable(at: start)); return end }
  public static func createImage(
    _ fbb: inout FlatBufferBuilder,
    imageEncoding: arcfile_Encoding = .h264,
    imageTimestamp: Double = 0.0,
    vectorOfImageData imageData: Offset<UOffset> = Offset()
  ) -> Offset<UOffset> {
    let __start = arcfile_Image.startImage(&fbb)
    arcfile_Image.add(imageEncoding: imageEncoding, &fbb)
    arcfile_Image.add(imageTimestamp: imageTimestamp, &fbb)
    arcfile_Image.addVectorOf(imageData: imageData, &fbb)
    return arcfile_Image.endImage(&fbb, start: __start)
  }
}

